import os
import sys
import json
import logging

from flask import Flask, request, abort
import gspread
from oauth2client.service_account import ServiceAccountCredentials

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

# --- Logging ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# --- Ki·ªÉm tra m√¥i tr∆∞·ªùng ƒë·ªÉ tr√°nh ch·∫°y bot nhi·ªÅu n∆°i ---
IS_RENDER = os.environ.get("RENDER") == "true" or "onrender.com" in os.environ.get("RENDER_EXTERNAL_URL", "")
if not IS_RENDER:
    print("‚ùå Bot ch·ªâ ch·∫°y tr√™n Render ƒë·ªÉ tr√°nh conflict polling.")
    sys.exit(0)

# --- Env Variables ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
SECRET_TOKEN = os.getenv("SECRET_TOKEN", "entry247")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")

# --- K·∫øt n·ªëi Google Sheets ---
sheet = None
try:
    if GOOGLE_CREDS_JSON:
        creds_dict = json.loads(GOOGLE_CREDS_JSON)
        scope = ['https://spreadsheets.google.com/feeds',
                 'https://www.googleapis.com/auth/drive']
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        gc = gspread.authorize(creds)
        sheet = gc.open_by_key(SPREADSHEET_ID)
        logging.info("‚úÖ ƒê√£ k·∫øt n·ªëi Google Sheet")
    else:
        logging.warning("‚ö†Ô∏è GOOGLE_CREDS_JSON kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh")
except Exception as e:
    logging.error(f"‚ùå L·ªói k·∫øt n·ªëi Google Sheets: {e}")

# --- Flask App ---
app_flask = Flask(__name__)

@app_flask.route("/")
def index():
    return "‚úÖ Entry247 bot ƒëang ch·∫°y!"

@app_flask.route("/admin/status")
def admin_status():
    token = request.args.get("token")
    if token != SECRET_TOKEN:
        abort(403)

    sheet_status = "‚úÖ Google Sheets OK" if sheet else "‚ùå Kh√¥ng k·∫øt n·ªëi Google Sheets"
    return f"""
    ‚úÖ Bot ho·∫°t ƒë·ªông<br>
    {sheet_status}<br>
    üîê Admin x√°c th·ª±c OK
    """

# --- Handlers Telegram Bot ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã Xin ch√†o! ƒê√¢y l√† bot Entry247.\nG√µ /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot:\n/start - B·∫Øt ƒë·∫ßu\n/help - Tr·ª£ gi√∫p")

# --- Kh·ªüi t·∫°o Telegram Bot ---
application = ApplicationBuilder().token(BOT_TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_command))

# --- Ch·∫°y polling khi ch·∫°y b·∫±ng Python (Render) ---
if __name__ == "__main__":
    if IS_RENDER:
        logging.info("üöÄ Kh·ªüi ƒë·ªông bot Telegram (Render)...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    else:
        logging.info("‚õî Kh√¥ng kh·ªüi ƒë·ªông polling ngo√†i m√¥i tr∆∞·ªùng Render.")
